import React, { useState } from 'react';
import { X, Search } from 'lucide-react';

const techCategories = {
  frontend: {
    name: 'Frontend (Client Layer)',
    color: 'text-blue-400',
    technologies: [
      { name: 'React', icon: '‚öõÔ∏è' },
      { name: 'Angular', icon: 'üÖ∞Ô∏è' },
      { name: 'Vue.js', icon: 'üíö' },
      { name: 'Svelte', icon: 'üß°' },
      { name: 'Flutter', icon: 'üì±' },
      { name: 'Swift', icon: 'üçé' },
      { name: 'Kotlin', icon: 'ü§ñ' },
      { name: 'Redux', icon: 'üîÑ' },
      { name: 'MobX', icon: 'üì¶' },
      { name: 'Vuex', icon: 'üóÉÔ∏è' },
      { name: 'Next.js', icon: '‚ñ≤' },
      { name: 'Nuxt.js', icon: 'üíö' },
      { name: 'SSR', icon: 'üñ•Ô∏è' },
      { name: 'CSR', icon: 'üåê' },
      { name: 'REST Client', icon: 'üîó' },
      { name: 'GraphQL Client', icon: 'üìä' },
      { name: 'gRPC Client', icon: '‚ö°' },
      { name: 'Cloudflare CDN', icon: '‚òÅÔ∏è' },
      { name: 'Akamai CDN', icon: 'üåç' },
      { name: 'AWS CloudFront', icon: 'üì°' }
    ]
  },
  backend: {
    name: 'Backend (Application Layer)',
    color: 'text-green-400',
    technologies: [
      { name: 'Node.js', icon: 'üü¢' },
      { name: 'Express.js', icon: 'üöÇ' },
      { name: 'NestJS', icon: 'üê±' },
      { name: 'Django', icon: 'üêç' },
      { name: 'Flask', icon: 'üå∂Ô∏è' },
      { name: 'FastAPI', icon: '‚ö°' },
      { name: 'Spring Boot', icon: 'üçÉ' },
      { name: 'Ruby on Rails', icon: 'üíé' },
      { name: 'Kong', icon: 'ü¶ç' },
      { name: 'NGINX', icon: 'üåê' },
      { name: 'AWS API Gateway', icon: 'üö™' },
      { name: 'Envoy', icon: 'üìÆ' },
      { name: 'Microservices', icon: 'üîß' },
      { name: 'Monolith', icon: 'üèóÔ∏è' },
      { name: 'AWS Lambda', icon: '‚ö°' },
      { name: 'GCP Functions', icon: '‚òÅÔ∏è' },
      { name: 'Azure Functions', icon: 'üî∑' },
      { name: 'Kafka', icon: 'üì®' },
      { name: 'RabbitMQ', icon: 'üê∞' },
      { name: 'Redis Streams', icon: 'üî¥' },
      { name: 'ActiveMQ', icon: 'üì¨' }
    ]
  },
  database: {
    name: 'Database Layer (Data Storage)',
    color: 'text-purple-400',
    technologies: [
      { name: 'MySQL', icon: 'üê¨' },
      { name: 'PostgreSQL', icon: 'üêò' },
      { name: 'Oracle', icon: 'üî¥' },
      { name: 'MS SQL Server', icon: 'üóÑÔ∏è' },
      { name: 'MongoDB', icon: 'üçÉ' },
      { name: 'Cassandra', icon: 'üèõÔ∏è' },
      { name: 'DynamoDB', icon: '‚ö°' },
      { name: 'CouchDB', icon: 'üõãÔ∏è' },
      { name: 'Redis', icon: 'üî¥' },
      { name: 'Memcached', icon: 'üíæ' },
      { name: 'Elasticsearch', icon: 'üîç' },
      { name: 'Solr', icon: '‚òÄÔ∏è' },
      { name: 'Meilisearch', icon: 'üîé' },
      { name: 'BigQuery', icon: 'üìä' },
      { name: 'Snowflake', icon: '‚ùÑÔ∏è' },
      { name: 'Redshift', icon: 'üî¥' },
      { name: 'Hadoop', icon: 'üêò' }
    ]
  },
  cloud: {
    name: 'Cloud & Infrastructure',
    color: 'text-orange-400',
    technologies: [
      { name: 'AWS', icon: '‚òÅÔ∏è' },
      { name: 'Google Cloud', icon: 'üå§Ô∏è' },
      { name: 'Microsoft Azure', icon: 'üî∑' },
      { name: 'Docker', icon: 'üê≥' },
      { name: 'Podman', icon: 'ü¶≠' },
      { name: 'Kubernetes', icon: '‚öì' },
      { name: 'Amazon ECS', icon: 'üì¶' },
      { name: 'OpenShift', icon: 'üî¥' },
      { name: 'HAProxy', icon: '‚öñÔ∏è' },
      { name: 'NGINX LB', icon: 'üåê' },
      { name: 'AWS ELB', icon: '‚öñÔ∏è' },
      { name: 'Amazon S3', icon: 'ü™£' },
      { name: 'Google Cloud Storage', icon: '‚òÅÔ∏è' },
      { name: 'Azure Blob Storage', icon: 'üî∑' },
      { name: 'Cloudflare', icon: '‚òÅÔ∏è' },
      { name: 'Akamai', icon: 'üåç' },
      { name: 'Fastly', icon: '‚ö°' }
    ]
  },
  security: {
    name: 'Security & Authentication',
    color: 'text-red-400',
    technologies: [
      { name: 'OAuth 2.0', icon: 'üîê' },
      { name: 'OpenID Connect', icon: 'üÜî' },
      { name: 'SAML', icon: 'üîí' },
      { name: 'JWT', icon: 'üé´' },
      { name: 'RBAC', icon: 'üë•' },
      { name: 'ABAC', icon: 'üè∑Ô∏è' },
      { name: 'Auth0', icon: 'üîê' },
      { name: 'Okta', icon: 'üîë' },
      { name: 'Keycloak', icon: 'üóùÔ∏è' },
      { name: 'AWS IAM', icon: 'üë§' },
      { name: 'TLS/SSL', icon: 'üîí' },
      { name: 'AES Encryption', icon: 'üîê' },
      { name: 'RSA Encryption', icon: 'üîë' },
      { name: 'WAF', icon: 'üõ°Ô∏è' },
      { name: 'Cloudflare Security', icon: 'üõ°Ô∏è' },
      { name: 'ModSecurity', icon: 'üîí' }
    ]
  },
  observability: {
    name: 'Observability & Reliability',
    color: 'text-yellow-400',
    technologies: [
      { name: 'Prometheus', icon: 'üìä' },
      { name: 'Grafana', icon: 'üìà' },
      { name: 'Datadog', icon: 'üêï' },
      { name: 'New Relic', icon: 'üìä' },
      { name: 'ELK Stack', icon: 'ü¶å' },
      { name: 'Elasticsearch', icon: 'üîç' },
      { name: 'Logstash', icon: 'üìù' },
      { name: 'Kibana', icon: 'üìä' },
      { name: 'Splunk', icon: 'üîç' },
      { name: 'Graylog', icon: 'üìã' },
      { name: 'Jaeger', icon: 'üïµÔ∏è' },
      { name: 'Zipkin', icon: 'üìç' },
      { name: 'OpenTelemetry', icon: 'üì°' },
      { name: 'PagerDuty', icon: 'üìü' },
      { name: 'Opsgenie', icon: 'üö®' },
      { name: 'VictorOps', icon: '‚ö°' },
      { name: 'Gremlin', icon: 'üëπ' },
      { name: 'Chaos Monkey', icon: 'üêí' }
    ]
  },
  middleware: {
    name: 'Middleware & Supporting Components',
    color: 'text-cyan-400',
    technologies: [
      { name: 'NGINX Proxy', icon: 'üåê' },
      { name: 'Envoy Proxy', icon: 'üìÆ' },
      { name: 'Apache HTTP', icon: 'ü™∂' },
      { name: 'Celery', icon: 'üåø' },
      { name: 'Sidekiq', icon: 'üíé' },
      { name: 'BullMQ', icon: 'üêÇ' },
      { name: 'Google Analytics', icon: 'üìä' },
      { name: 'Mixpanel', icon: 'üß™' },
      { name: 'Segment', icon: 'üìà' }
    ]
  }
};

export default function TechSelector({ isOpen, onClose, selectedTechs = [], onTechToggle }) {
  const [searchTerm, setSearchTerm] = useState('');
  const [activeCategory, setActiveCategory] = useState('frontend');

  if (!isOpen) return null;

  const filteredTechs = searchTerm
    ? Object.values(techCategories).flatMap(category =>
        category.technologies.filter(tech =>
          tech.name.toLowerCase().includes(searchTerm.toLowerCase())
        )
      )
    : techCategories[activeCategory]?.technologies || [];

  const handleTechClick = (techName) => {
    onTechToggle(techName);
  };

  return (
    <div className="fixed inset-0 bg-black/60 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-800 rounded-2xl border border-gray-700 shadow-2xl w-[98vw] h-[90vh] flex flex-col max-w-7xl">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700 flex-shrink-0">
          <div>
            <h2 className="text-xl font-semibold text-white">üèóÔ∏è System Design Components & Technologies</h2>
            <p className="text-sm text-gray-400 mt-1">Choose the technologies used in this service</p>
          </div>
          <button
            onClick={onClose}
            className="p-2 hover:bg-gray-700 rounded-lg transition-colors"
          >
            <X className="w-5 h-5 text-gray-400" />
          </button>
        </div>

        {/* Search */}
        <div className="p-6 border-b border-gray-700 flex-shrink-0">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-gray-400" />
            <input
              type="text"
              placeholder="Search technologies..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-3 bg-gray-900 text-white text-sm border border-gray-600 rounded-lg focus:outline-none focus:border-purple-500 focus:ring-1 focus:ring-purple-500/20"
            />
          </div>
        </div>

        {/* Horizontal Categories */}
        {!searchTerm && (
          <div className="px-6 py-4 border-b border-gray-700 flex-shrink-0">
            <div className="flex gap-2 overflow-x-auto">
              {Object.entries(techCategories).map(([key, category]) => (
                <button
                  key={key}
                  onClick={() => setActiveCategory(key)}
                  className={`whitespace-nowrap px-4 py-2 rounded-lg text-xs font-medium transition-colors ${
                    activeCategory === key
                      ? 'bg-purple-600/20 text-purple-400 border border-purple-500/30'
                      : 'text-gray-400 hover:bg-gray-700/50 hover:text-gray-300'
                  }`}
                >
                  <span className={`${category.color} mr-2`}>‚óè</span>{category.name}
                </button>
              ))}
            </div>
          </div>
        )}

        {/* Technologies Grid */}
        <div className="flex-1 p-6 overflow-y-auto">
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 2xl:grid-cols-5 gap-3">
            {filteredTechs.map((tech) => (
              <button
                key={tech.name}
                onClick={() => handleTechClick(tech.name)}
                className={`flex items-center gap-3 p-3 rounded-lg border transition-all hover:scale-[1.02] ${
                  selectedTechs.includes(tech.name)
                    ? 'bg-purple-600/20 border-purple-500/50 text-purple-300 shadow-lg shadow-purple-500/20'
                    : 'bg-gray-900/50 border-gray-600 text-gray-300 hover:bg-gray-700/50 hover:border-gray-500'
                }`}
              >
                <span className="text-2xl flex-shrink-0">{tech.icon}</span>
                <span className="text-sm font-medium text-left">{tech.name}</span>
              </button>
            ))}
          </div>
          
          {filteredTechs.length === 0 && (
            <div className="text-center text-gray-400 py-12">
              <p className="text-lg">No technologies found matching "{searchTerm}"</p>
            </div>
          )}
        </div>

        {/* Footer */}
        <div className="p-6 border-t border-gray-700 flex items-center justify-between flex-shrink-0">
          <div className="text-base text-gray-400">
            <span className="font-medium text-purple-400">{selectedTechs.length}</span> technologies selected
          </div>
          <div className="flex gap-3">
            <button
              onClick={() => selectedTechs.forEach(tech => onTechToggle(tech))}
              className="px-6 py-3 text-gray-400 hover:text-white transition-colors text-base"
            >
              Clear All
            </button>
            <button
              onClick={onClose}
              className="px-8 py-3 bg-gradient-to-r from-purple-600 to-purple-700 hover:from-purple-500 hover:to-purple-600 text-white rounded-xl transition-all shadow-lg hover:shadow-xl text-base font-medium"
            >
              Done
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}